;Задача №2
;Определите функицонал (MAPLIST fn список) для одного списочного аргумента

(defun my_MAPLIST (f args)
    (cond
        ((NULL args) nil)
        (t (cons (APPLY f args) (my_MAPLIST f (cdr args))))
    )
)

(print "Задача №2. Определите функицонал (MAPLIST fn список) для одного списочного аргумента")
(print (my_MAPLIST '* '(1 2 3 4 5 6) ))
(print (my_MAPLIST '+ '(1 2 3 4 5 6) ))
(print (my_MAPLIST '- '(1 2 3 4 5 6) ))

;Задача №4
;Определите функциональный предикат (КАЖДЫЙ пред список), который истинен в том и только в том случае, когда, являющейся функциональным аргументом предикат пред истинен для всех элементов списка список

(defun each1 (p l)
  (cond ((null l) t)
        ((funcall p (car l)) (each1 p (cdr l)))
        (t nil)))


(print "Задача №4. Определите функциональный предикат (КАЖДЫЙ пред список), который истинен в том и только в том случае, когда, являющейся функциональным аргументом предикат пред истинен для всех элементов списка список")
(print (each1 'atom '(a b c)))
(print (each1 'numberp '(1 2 a 3)))
(print (each1 'atom '(1 (a b c))))

;Задача №6
;Определите фильтр (УДАЛИТЬ-ЕСЛИ пред список), удаляющий из списка список все элементы, которые обладает свойством, наличие которого проверяет предикат пред.

(defun IF_DEL (p l)
    (cond
        ((null l) nil)
        ((funcall p (car l)) (IF_DEL p (cdr l)))
        (t (cons (car l) (IF_DEL p (cdr l))))
    )
)

(print "Задача №6. Определите фильтр (УДАЛИТЬ-ЕСЛИ пред список), удаляющий из списка список все элементы, которые обладает свойством, наличие которого проверяет предикат пред.")
(print (IF_DEL 'evenp '(1 2 3 4 5 6)))
(print (IF_DEL 'zerop '(1 0 3 0 5 6)))
(print (IF_DEL 'evenp '()))

;Задача №8
;Напишите генератор натуральных чисел: 0, 1, 2, 3, 4, 5, ...

(defun make-natural-numbers-counter ()
    (let ( (x 0) )
         (lambda () (setq x (+ x 1)))
    )
)
 (setq c1 (MAKE-NATURAL-NUMBERS-COUNTER))

(print "Задача №8.Напишите генератор натуральных чисел: 0, 1, 2, 3, 4, 5, ...")
(print (funcall c1))
(print (funcall c1))
(print (funcall c1))

;Задача №12
;Определите функцию, которая возвращает в качестве значения свой вызов

(print "Задача №12. Определите функцию, которая возвращает в качестве значения свой вызов")
(print ((lambda (x) (list x (list 'quote x)))
   '(lambda (x) (list x (list 'quote x)))))


;Задача №14
;Определите функцию, которая возвращает в качестве значения форму своего определения (DEFUN)
(defun quine ()
  ((lambda (x) (list x (list 'quote x)))
   '(lambda (x) (list x (list 'quote x)))))

(print "Задача №14. Определите функцию, которая возвращает в качестве значения форму своего определения (DEFUN)")
(print (quine))

